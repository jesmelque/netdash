"""
Django settings for NetDash project.

Generated by 'django-admin startproject' using Django 2.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from os import getenv

import dj_database_url


def csv_to_list(csv, delim=','):
    try:
        return [x.strip() for x in csv.split(delim) if x.strip()]
    except Exception:
        return []


def str_to_bool(val):
    return val.lower() in ('yes', 'true', 'on', '1')


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = getenv('NETDASH_SECRET_KEY', None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = str_to_bool(getenv('NETDASH_DEBUG', 'off'))

ALLOWED_HOSTS = csv_to_list(getenv('NETDASH_ALLOWED_HOSTS', None))

CORS_ORIGIN_ALLOW_ALL = str_to_bool(
    getenv('NETDASH_CORS_ORIGIN_ALLOW_ALL', 'off')
    )

CORS_ORIGIN_WHITELIST = getenv('NETDASH_CORS_ORIGIN_WHITELIST', [])


NETDASH_MODULES = csv_to_list(os.getenv('NETDASH_MODULES'))

# Add all variables from the environment that start with NETDASH_ to the
# settings namespace, removing the leading "NETDASH_":
_prefix = 'NETDASH_APP_'
locals().update({k[len(_prefix):]: v for k, v in os.environ.items() if k[:len(_prefix)] == _prefix})

# Application definition

INSTALLED_APPS = NETDASH_MODULES + [
    'netdash_api',
    'netdash_ui',
    'rest_framework',
    'rest_framework_swagger',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
)

ROOT_URLCONF = 'netdash.urls'
LOGIN_URL = getenv('NETDASH_LOGIN_URL', '/admin/login/')

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'netdash.wsgi.application'


# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    'default': dj_database_url.config(default='sqlite:///db.sqlite3')
}


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'UserAttributeSimilarityValidator'),
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'MinimumLengthValidator'),
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'CommonPasswordValidator'),
    },
    {
        'NAME': ('django.contrib.auth.password_validation.'
                 'NumericPasswordValidator'),
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = getenv('NETDASH_TIME_ZONE', 'America/Detroit')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = '/static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

_saml2_sp_name = os.getenv('SAML2_SP_NAME', None)
_saml2_sp_key = os.getenv('SAML2_SP_KEY', None)
_saml2_sp_cert = os.getenv('SAML2_SP_CERT', None)
_saml2_idp_metadata = os.getenv('SAML2_IDP_METADATA', None)
_saml2_entity_id = os.getenv('SAML2_ENTITY_ID', None)
_saml2_acs_post = os.getenv('SAML2_ACS_POST', None)
_saml2_ls_redirect = os.getenv('SAML2_LS_REDIRECT', None)
_saml2_ls_post = os.getenv('SAML2_LS_POST', None)
_saml2_required_attributes = os.getenv('SAML2_REQUIRED_ATTRIBUTES', '').split(',')
_saml2_optional_attributes = os.getenv('SAML2_OPTIONAL_ATTRIBUTES', '').split(',')

if not (_saml2_sp_name and _saml2_sp_key and _saml2_sp_cert and _saml2_idp_metadata 
    and _saml2_entity_id and _saml2_acs_post and _saml2_ls_post and _saml2_ls_redirect):
    print('SAML2 environment variables not set. Skipping djangosaml2 configuration.')
else:
    import saml2
    import tempfile

    LOGIN_REDIRECT_URL = '/'
    LOGIN_URL = '/saml/login/'
    INSTALLED_APPS += ('djangosaml2',)
    AUTHENTICATION_BACKENDS += ('djangosaml2.backends.Saml2Backend',)

    SESSION_EXPIRE_AT_BROWSER_CLOSE = True

    BASEDIR = os.path.dirname(os.path.abspath(__file__))

    # Generate temp files for cert, key, and metadata
    _saml2_sp_cert_file = tempfile.NamedTemporaryFile('w+', buffering=1)
    _saml2_sp_cert_file.write(_saml2_sp_cert + '\n')

    _saml2_sp_key_file = tempfile.NamedTemporaryFile('w+', buffering=1)
    _saml2_sp_key_file.write(_saml2_sp_key + '\n')

    _saml2_idp_metadata_file = tempfile.NamedTemporaryFile('w+', buffering=1)
    _saml2_idp_metadata_file.write(_saml2_idp_metadata + '\n')

    SAML_CONFIG = {
        'xmlsec_binary': '/usr/bin/xmlsec1',
        # 'entityid': '%smetadata/' % SAML2_URL_BASE,
        'entityid': _saml2_entity_id, # e.g. https://yourdomain.cm/saml/metadata,

        # directory with attribute mapping
        # 'attribute_map_dir': path.join(BASEDIR, 'attribute-maps'),
        'name': _saml2_sp_name,

        # this block states what services we provide
        'service': {
            'sp': {
                'name': _saml2_sp_name,
                'name_id_format': ('urn:oasis:names:tc:SAML:2.0:nameid-format:transient'),
                'authn_requests_signed': 'true',
                'allow_unsolicited': True,
                'endpoints': {
                    # url and binding to the assetion consumer service view
                    # do not change the binding or service name
                    'assertion_consumer_service': [
                        (_saml2_acs_post, saml2.BINDING_HTTP_POST),
                    ],
                    # url and binding to the single logout service view
                    # do not change the binding or service name
                    'single_logout_service': [
                        (_saml2_ls_redirect, saml2.BINDING_HTTP_REDIRECT),
                        (_saml2_ls_post, saml2.BINDING_HTTP_POST),
                    ],
                },
                'required_attributes': _saml2_required_attributes,
                'optional_attributes': _saml2_optional_attributes,
            },
        },

        # where the remote metadata is stored
        'metadata': {
            'local': [_saml2_idp_metadata_file.name],
        },

        # set to 1 to output debugging information
        'debug': 1 if DEBUG else 0,

        # certificate
        'key_file': _saml2_sp_key_file.name,
        'cert_file': _saml2_sp_cert_file.name,
    }

    SAML_CREATE_UNKNOWN_USER = True

    SAML_ATTRIBUTE_MAPPING = {
        'uid': ('username', ),
        'mail': ('email', ),
        'givenName': ('first_name', ),
        'sn': ('last_name', ),
    }
